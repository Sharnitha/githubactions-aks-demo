# This is a basic workflow to help you get started with Actions

name: AKS Deployment
on:
  workflow_dispatch:
   # push:
   #  branches:
   #  - master
    # paths:
    # - Controllers/**

jobs:
  Install_Dotnet:
    runs-on: ubuntu-latest
    steps:
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{secrets.DOTNET_VERSION}}
        
  Restoring_Dependencies:
    runs-on: ubuntu-latest
    needs: Install_Dotnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Dotnet restore
        run: dotnet restore
      - name: Dotnet build
        run: dotnet build -c release
      - name: Dotnet publish
        # run: dotnet publish -c release
        run:  dotnet publish -c release -o app/publish
          
  # UploadArtifacts:
  #   runs-on: ubuntu-latest
  #   needs: Restoring_Dependencies
  #   steps:
  #     - name: UploadArtifact
  #       uses: actions/upload-artifact@v4.3.1
  #       with:
  #         name: dotnetdll
  #         path: bin/release/netcoreapp3.1/publish/aks-ga-demo.dll  --> check this path present (ls)

    #<sonarqube>

  Docker_Login:
    runs-on: ubuntu-latest
    needs: Restoring_Dependencies
    steps:
      - name: Docker Login to ACR
        uses: docker/login-action@v3.1.0
        with:
          registry: githubcipractice.azurecr.io
          username: ${{secrets.ACR_ID}} #Clientid
          password: ${{secrets.ACR_PASS}} #Clientsecret
          ecr: false

  # Docker_Build:
  #   runs-on: ubuntu-latest
  #   needs: Docker_Login
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Docker build using Dockerfile
  #       run: |
  #         gh run download ${{ github.run_id }}
  #         docker build -t githubcipractice.azurecr.io/demoenv:${{ github.run_id }} .
        
  # Trivyscan:
  # # if: github.ref == github.event.pull_request.head.ref || github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   needs: Docker_Build
  #   steps:
  #     - name: Aqua Security Trivy
  #       uses: aquasecurity/trivy-action@0.18.0
  #       with:   
  #         exit-code: 0
  #         severity: MEDIUM,HIGH,CRITICAL
  #         format: table
  #         image-ref: githubcipractice.azurecr.io/demoenv:${{ github.run_id }}

  # Docker_Push:
  #   runs-on: ubuntu-latest
  #   needs: Trivyscan 
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Docker build using Dockerfile
  #       run: docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  

  #--------------------------------------------------------
            
    #   - name: docker login
    #     run: docker login --username '${{secrets.DOCKER_LOGIN}}' --password '${{secrets.DOCKER_PASSWORD}}'
      
    # - name: tag docker image
    #   run: docker tag githubactions-aks-demo:'${{github.sha}}' '${{secrets.DOCKER_LOGIN}}'/githubactions-aks-demo:'${{github.sha}}'
    
    # - name: push docker image
    #   run: docker push '${{secrets.DOCKER_LOGIN}}'/githubactions-aks-demo:'${{github.sha}}'
      
  #   - name: Azure Kubernetes set context
  #     uses: Azure/aks-set-context@v1
  #     with:
  #       # Azure credentials i.e. output of `az ad sp create-for-rbac --sdk-auth`
  #       creds: '${{secrets.AZURE_CREDENTIALS}}'
  #       # Resource Group Name
  #       resource-group: aks-demo-rg
  #       # AKS Cluster Name
  #       cluster-name: ga-aks-demo-cluster

  # # Create K8s secrets to pull images
  #   - name: Create secret in Kubernetes cluster
  #     uses: Azure/k8s-create-secret@v1.1
  #     with:
  #       # Container registry url
  #       container-registry-url: https://index.docker.io/v1/
  #       # Container registry username
  #       container-registry-username: '${{secrets.DOCKER_LOGIN}}'
  #       # Container registry password
  #       container-registry-password:  '${{secrets.DOCKER_PASSWORD}}'
  #       # Type of Kubernetes secret. For example, docker-registry or generic
  #       secret-type: docker-registry
  #       # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
  #       secret-name: docker-image-pull-secret
        
  #     # Deploy to k8s cluster
  #   - name: Deploy to Kubernetes cluster
  #     uses: Azure/k8s-deploy@v1
  #     with:        
  #       # Path to the manifest files which will be used for deployment.
  #       manifests: |
  #         k8s/deployment.yml
  #         k8s/service.yml
  #       # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
  #       images: '${{secrets.DOCKER_LOGIN}}/githubactions-aks-demo:${{github.sha}}'
  #       # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
  #       imagepullsecrets: docker-image-pull-secret
  #       # deploy/promote/reject
  #       action: deploy
        
    
        
    
